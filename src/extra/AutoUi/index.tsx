import React from "react";

import {
	AutoUIAction,
	AutoUIModel,
	AutoUIBaseResource,
	AutoUIRawModel,
	autoUIJsonSchemaPick,
} from "./schemaOps";
import { ResourceTagModelService } from "../../components/TagManagementModal/tag-management-service";
import { Format } from "../../components/Renderer/types";
import {
	autoUIRunTransformers,
	autoUIGetModelForCollection,
	autoUIDefaultPermissions,
	autoUIAddToSchema,
} from "./models/helpers";
import { autoUIGetDisabledReason } from "./utils";
import { Dictionary } from "../../common-types";
import { LensTemplate } from "./Lenses";
import { AutoUICollection } from "./Collection";

export interface AutoUIProps<T> {
	/** Model is the property that describe the data to display with a JSON structure */
	model: AutoUIModel<T>;
	/** Array of data to display */
	data: T[] | T | undefined;
	/** Formats are custom widgets to render in the table cell. The type of format to display is described in the model. */
	formats?: Format[];
	/** Actions is an array of actions applicable on the selected items */
	actions?: Array<AutoUIAction<T>>;
	/** The sdk is used to pass the method to handle tags when added removed or updated */
	sdk?: {
		tags?: ResourceTagModelService;
	};
	/** Dictionary of {[column_property]: customFunction} where the customFunction is the function to sort data on column header click */
	customSort?: Dictionary<(a: T, b: T) => void>;
	// TODO: Ideally the base URL is autogenerated, but there are some issues with that currently (eg. instead of application we have apps in the URL)
	/** Redirect on row click */
	getBaseUrl?: (entry: T) => string;
	/** Method to refresh the collection when something is changed */
	refresh?: () => void;
	/** Event emitted on row click */
	onEntityClick?: (
		entry: T,
		event: React.MouseEvent<HTMLAnchorElement, MouseEvent>
	) => void;
	customLenses?: LensTemplate[];
	lensContext?: object;
}

export const AutoUI = <T extends AutoUIBaseResource<T>>({
	model,
	data,
	formats,
	actions,
	sdk,
	customSort,
	refresh,
	getBaseUrl,
	onEntityClick,
	customLenses,
	onePer,
}: AutoUIProps<T>) => {
	return Array.isArray(data) ? (
		<AutoUICollection<T>
			formats={formats}
			data={data}
			model={model}
			sdk={sdk}
			refresh={refresh}
			getBaseUrl={getBaseUrl}
			actions={actions}
			customSort={customSort}
			customLenses={customLenses}
			onEntityClick={onEntityClick}
			onePer={onePer}
		/>
	) : (
		<AutoUIEntity
			formats={formats}
			data={data}
			model={model}
			sdk={sdk}
			actions={actions}
			customLenses={customLenses}
			lensContext={lensContext}
		/>
	);
};
